{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":1596355,"sourceType":"datasetVersion","datasetId":941801}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torchvision import datasets, models, transforms\nfrom torch.utils.data import DataLoader","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:35:16.169247Z","iopub.execute_input":"2025-07-10T07:35:16.169471Z","iopub.status.idle":"2025-07-10T07:35:26.109238Z","shell.execute_reply.started":"2025-07-10T07:35:16.169448Z","shell.execute_reply":"2025-07-10T07:35:26.108648Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"img_width = 128\nimg_height = 128\n\ndata_transforms = {\n    'train': transforms.Compose([\n        # transforms.Resize((img_width, img_height)), # elles sont déjà toute à cette taille\n        transforms.ToTensor(),  # Convertir les images en tenseur PyTorch\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])  # Normaliser les images\n    ]),\n    'val': transforms.Compose([\n        # transforms.Resize((img_width, img_height)),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])\n}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:35:26.109919Z","iopub.execute_input":"2025-07-10T07:35:26.110295Z","iopub.status.idle":"2025-07-10T07:35:26.114664Z","shell.execute_reply.started":"2025-07-10T07:35:26.110276Z","shell.execute_reply":"2025-07-10T07:35:26.113844Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data_dir = \"/kaggle/input/airbus-wind-turbines-patches\"\n\ntrain_dataset = datasets.ImageFolder(data_dir + '/train', transform=data_transforms['train'])\nval_dataset   = datasets.ImageFolder(data_dir + '/val', transform=data_transforms['val'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:35:26.116580Z","iopub.execute_input":"2025-07-10T07:35:26.116787Z","iopub.status.idle":"2025-07-10T07:50:14.506536Z","shell.execute_reply.started":"2025-07-10T07:35:26.116772Z","shell.execute_reply":"2025-07-10T07:50:14.505967Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"batch_size = 128\nlearning_rate = 0.001\nnum_epochs = 10","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.509349Z","iopub.execute_input":"2025-07-10T07:50:14.509549Z","iopub.status.idle":"2025-07-10T07:50:14.513063Z","shell.execute_reply.started":"2025-07-10T07:50:14.509530Z","shell.execute_reply":"2025-07-10T07:50:14.512412Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_loader   = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4, pin_memory=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.513706Z","iopub.execute_input":"2025-07-10T07:50:14.513925Z","iopub.status.idle":"2025-07-10T07:50:14.534487Z","shell.execute_reply.started":"2025-07-10T07:50:14.513908Z","shell.execute_reply":"2025-07-10T07:50:14.533868Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"class CNN(nn.Module):\n    def __init__(self):\n        super(CNN, self).__init__()\n        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1)   # 1ère couche convolutionnelle\n        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)  # 2ème couche convolutionnelle\n        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1) # 3ème couche convolutionnelle\n        self.pool = nn.MaxPool2d(2, 2)                            # Max pooling avec kernel de 2\n        self.fc1 = nn.Linear(128 * 16 * 16, 256)                  # 1ère couche complètement connectée\n        self.fc2 = nn.Linear(256, 2)                              # 2ème couche complètement connectée (sortie)\n\n    def forward(self, x):\n        x = self.pool(torch.relu(self.conv1(x)))  # Convolution + ReLU + Pooling\n        x = self.pool(torch.relu(self.conv2(x)))  # Convolution + ReLU + Pooling\n        x = self.pool(torch.relu(self.conv3(x)))  # Convolution + ReLU + Pooling\n        x = nn.Flatten()(x)                       # Aplatir les données\n        x = torch.relu(self.fc1(x))               # Couche FC + ReLU\n        x = self.fc2(x)                           # Couche FC finale\n        return x","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.535230Z","iopub.execute_input":"2025-07-10T07:50:14.535433Z","iopub.status.idle":"2025-07-10T07:50:14.552442Z","shell.execute_reply.started":"2025-07-10T07:50:14.535417Z","shell.execute_reply":"2025-07-10T07:50:14.551823Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def train_model(model, device, train_loader, val_loader, optimizer, criterion, num_epochs):\n    for epoch in range(num_epochs):\n        model.train()  \n        running_loss = 0.0\n\n        for inputs, labels in train_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n\n            # Remise à zéro des gradients\n            optimizer.zero_grad()\n\n            # Forward\n            outputs = model(inputs)\n            loss = criterion(outputs, labels)\n\n            # Backward\n            loss.backward()\n            optimizer.step()\n\n            running_loss += loss.item()\n\n        print(f\"Époque {epoch+1}/{num_epochs}, Perte: {running_loss / len(train_loader)}\")\n\n        model.eval()\n        correct = 0\n        total = 0\n        with torch.no_grad():\n            for inputs, labels in val_loader:\n                inputs, labels = inputs.to(device), labels.to(device)\n                outputs = model(inputs)\n                _, predicted = torch.max(outputs, 1)\n                total += labels.size(0)\n                correct += (predicted == labels).sum().item()\n\n        print(f'Précision sur l’ensemble de validation: {100 * correct / total} %')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.553009Z","iopub.execute_input":"2025-07-10T07:50:14.553205Z","iopub.status.idle":"2025-07-10T07:50:14.575441Z","shell.execute_reply.started":"2025-07-10T07:50:14.553189Z","shell.execute_reply":"2025-07-10T07:50:14.574944Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.577147Z","iopub.execute_input":"2025-07-10T07:50:14.577367Z","iopub.status.idle":"2025-07-10T07:50:14.666234Z","shell.execute_reply.started":"2025-07-10T07:50:14.577336Z","shell.execute_reply":"2025-07-10T07:50:14.665623Z"}},"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"model = CNN()\nmodel.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=learning_rate)\n\ntrain_model(model, device, train_loader, val_loader, optimizer, criterion, num_epochs)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-10T07:50:14.667005Z","iopub.execute_input":"2025-07-10T07:50:14.667232Z","iopub.status.idle":"2025-07-10T08:43:57.333757Z","shell.execute_reply.started":"2025-07-10T07:50:14.667215Z","shell.execute_reply":"2025-07-10T08:43:57.332762Z"}},"outputs":[{"name":"stdout","text":"Époque 1/10, Perte: 0.053943058243563026\nPrécision sur l’ensemble de validation: 99.29234728127098 %\nÉpoque 2/10, Perte: 0.01974934941366363\nPrécision sur l’ensemble de validation: 99.48674200044752 %\nÉpoque 3/10, Perte: 0.012856555919612152\nPrécision sur l’ensemble de validation: 99.58324009845603 %\nÉpoque 4/10, Perte: 0.008412481539575337\nPrécision sur l’ensemble de validation: 99.57345043633923 %\nÉpoque 5/10, Perte: 0.006323797288987941\nPrécision sur l’ensemble de validation: 99.6112105616469 %\nÉpoque 6/10, Perte: 0.004318868411167371\nPrécision sur l’ensemble de validation: 99.63358693219959 %\nÉpoque 7/10, Perte: 0.0037246814450840634\nPrécision sur l’ensemble de validation: 99.59722533005147 %\nÉpoque 8/10, Perte: 0.004100057580017101\nPrécision sur l’ensemble de validation: 99.57764600581785 %\nÉpoque 9/10, Perte: 0.0034180406863933907\nPrécision sur l’ensemble de validation: 99.63358693219959 %\nÉpoque 10/10, Perte: 0.004140356169570069\nPrécision sur l’ensemble de validation: 99.58743566793466 %\n","output_type":"stream"}],"execution_count":9}]}